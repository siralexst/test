// ====== 0) Config ======
const SUPABASE_URL = 'https://hgvimvswbzvhtuaszwqv.supabase.co';
const SUPABASE_ANON = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhndmltdnN3Ynp2aHR1YXN6d3F2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA2Njg5MDcsImV4cCI6MjA3NjI0NDkwN30.vHtdIuMKCU5Su3ZoMbVLlKKSl3Xd0zxr0lmrG1kPiXc';
const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON);

// localforage: coadă offline pt. claim-uri
localforage.config({ name: 'pwa-agenti', storeName: 'offline_queue' });

// Helpers UI
const $ = (sel) => document.querySelector(sel);
const $$ = (sel) => document.querySelectorAll(sel);

// ====== 1) Tabs ======
$$('.tab-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    const tab = btn.dataset.tab;
    $$('.tab-btn').forEach(b => b.classList.remove('border-cyan-400'));
    btn.classList.add('border-cyan-400');
    $$('.tab').forEach(s => s.classList.add('hidden'));
    $(`#${tab}`).classList.remove('hidden');
    $(`#${tab}`).classList.add('active');
  });
});

// ====== 2) Models în memorie ======
let PRODUCTS = [];
let COMPETITORS = [];
let PRICES = []; // opțional cache local pentru comparativ

// ====== 3) Load bootstrap data ======
async function loadBootstrap() {
  const { data: products } = await supabase.from('products').select('*').order('name');
  PRODUCTS = products || [];

  const { data: competitors } = await supabase.from('competitors').select('*').order('name');
  COMPETITORS = competitors || [];

  // populate dropdowns
  const produsSel = $('#produs-select');
  const simSel = $('#sim-product');
  produsSel.innerHTML = '';
  simSel.innerHTML = '';
  PRODUCTS.forEach(p => {
    const o1 = document.createElement('option');
    o1.value = p.id; o1.textContent = `${p.name}`;
    produsSel.appendChild(o1);

    const o2 = document.createElement('option');
    o2.value = p.id; o2.textContent = `${p.name}`;
    simSel.appendChild(o2);
  });

  const compSel = $('#competitor-select');
  compSel.innerHTML = '';
  COMPETITORS.forEach(c => {
    const o = document.createElement('option');
    o.value = c.id; o.textContent = c.name;
    compSel.appendChild(o);
  });

  await renderCompetitorCards();
  await loadCompareData();
}
loadBootstrap();

// ====== 4) Progress cards per competitor ======
async function countPricesByCompetitor() {
  // Luăm toate prices și numărăm pe client (simplu). Poți optimiza cu RPC/SQL view.
  const { data } = await supabase
    .from('prices')
    .select('competitor_id', { count: 'exact', head: false });

  const map = new Map();
  (data || []).forEach(row => {
    const cId = row.competitor_id;
    map.set(cId, (map.get(cId) || 0) + 1);
  });
  return map;
}

async function renderCompetitorCards() {
  const container = $('#competitor-cards');
  container.innerHTML = '';
  const counts = await countPricesByCompetitor();
  const total = PRODUCTS.length;

  COMPETITORS.forEach(c => {
    const completed = counts.get(c.id) || 0;
    const percent = total ? Math.round((completed / total) * 100) : 0;

    const card = document.createElement('div');
    card.className = 'rounded-2xl p-4 bg-gradient-to-br from-fuchsia-700/40 to-cyan-600/30 backdrop-blur border border-white/10 shadow-lg';
    card.innerHTML = `
      <div class="flex items-center justify-between">
        <div class="font-semibold">${c.name}</div>
        <div class="text-xs opacity-80">${completed}/${total}</div>
      </div>
      <div class="mt-2 h-2 rounded-full bg-white/10 overflow-hidden">
        <div class="h-full" style="width:${percent}%; background:linear-gradient(90deg,#22d3ee,#a78bfa)"></div>
      </div>
    `;
    container.appendChild(card);
  });
}

// ====== 5) Claim logic (insert cu fallback offline) ======
$('#add-price-btn').addEventListener('click', async () => {
  const product_id = $('#produs-select').value;
  const competitor_id = $('#competitor-select').value;
  const price = parseFloat($('#price-input').value);
  const agent = $('#agent-input').value || null;

  if (!product_id || !competitor_id || !(price >= 0)) {
    return toast('Completează toate câmpurile.');
  }

  const payload = { product_id, competitor_id, price, agent };

  try {
    // încercăm online
    const { error } = await supabase.from('prices').insert(payload).select().single();
    if (error) {
      // dacă e duplicate (unique vio), cod Postgres 23505
      if ((error.code || '').toString() === '23505') {
        toast('Deja există un preț (claim) pt. acest produs la acest competitor.');
      } else {
        // altă eroare → punem în coadă offline
        await enqueueOffline(payload);
        toast('Nu s-a putut salva online. Am pus în coadă offline și sincronizăm când revine netul.');
      }
    } else {
      toast('Preț adăugat cu succes!');
      $('#price-input').value = '';
      await renderCompetitorCards();
      await loadCompareData();
    }
  } catch (e) {
    // offline sau altă eroare → punem în coadă
    await enqueueOffline(payload);
    toast('Ești offline. Am pus în coadă și sincronizăm automat când revine netul.');
  }
});

function toast(msg) {
  $('#collect-msg').textContent = msg;
  setTimeout(() => { $('#collect-msg').textContent = ''; }, 3500);
}

async function enqueueOffline(item) {
  const q = (await localforage.getItem('queue')) || [];
  q.push({ type: 'insert_price', item, ts: Date.now() });
  await localforage.setItem('queue', q);
}

async function processQueue() {
  const q = (await localforage.getItem('queue')) || [];
  if (!q.length) return;
  const rest = [];
  for (const job of q) {
    try {
      if (job.type === 'insert_price') {
        const { error } = await supabase.from('prices').insert(job.item);
        if (error && (error.code || '') !== '23505') {
          // dacă nu e duplicate, păstrăm jobul
          rest.push(job);
        }
      }
    } catch {
      rest.push(job);
    }
  }
  await localforage.setItem('queue', rest);
  if (q.length !== rest.length) {
    await renderCompetitorCards();
    await loadCompareData();
  }
}
window.addEventListener('online', processQueue);
setInterval(processQueue, 5000); // sync periodic

// ====== 6) Tab 2 – Comparativ (căutare + dif lei/% + colorare) ======
async function loadCompareData() {
  // tragem toate price-urile cu join competitor + product local pt. our_price
  const { data: prices } = await supabase
    .from('prices')
    .select(`
      id,
      price,
      product_id,
      competitor_id,
      competitors(name),
      products!inner(id,name,our_price)
    `);

  PRICES = prices || [];
  renderCompareTable();
}

function renderCompareTable() {
  const term = ($('#search-input').value || '').toLowerCase();
  const tbody = $('#compare-tbody');
  tbody.innerHTML = '';

  // grupăm pe product -> competitor rows
  const filtered = PRICES.filter(r =>
    (r.products?.name || '').toLowerCase().includes(term)
  );

  filtered.forEach(r => {
    const ours = Number(r.products.our_price || 0);
    const theirs = Number(r.price || 0);
    const diffLei = +(ours - theirs).toFixed(2);
    const diffPct = theirs > 0 ? +(((ours - theirs) / theirs) * 100).toFixed(2) : 0;
    const bad = diffLei > 0; // noi mai scumpi => roșu

    const tr = document.createElement('tr');
    tr.className = 'border-t border-white/5';
    tr.innerHTML = `
      <td class="px-3 py-2">${r.products.name}</td>
      <td class="px-3 py-2">${ours.toFixed(2)}</td>
      <td class="px-3 py-2">${r.competitors?.name || '-'}</td>
      <td class="px-3 py-2">${theirs.toFixed(2)}</td>
      <td class="px-3 py-2 ${bad ? 'text-rose-400' : 'text-emerald-400'}">${diffLei.toFixed(2)}</td>
      <td class="px-3 py-2 ${bad ? 'text-rose-400' : 'text-emerald-400'}">${diffPct.toFixed(2)}%</td>
    `;
    tbody.appendChild(tr);
  });
}
$('#search-input').addEventListener('input', renderCompareTable);
$('#reload-compare').addEventListener('click', loadCompareData);

// ====== 7) Tab 3 – Simulator coș ======
let CART = [];

function bestCompetitorPrice(product_id) {
  const rows = PRICES.filter(r => r.product_id === product_id);
  if (!rows.length) return { name: '-', price: 0 };
  let best = rows[0];
  rows.forEach(r => { if (r.price < best.price) best = r; });
  return { name: best.competitors?.name || '-', price: Number(best.price || 0) };
}

function recalcCart() {
  const tbody = $('#sim-tbody');
  tbody.innerHTML = '';
  let totalOur = 0, totalBestComp = 0;

  CART.forEach((item, idx) => {
    const p = PRODUCTS.find(x => x.id === item.product_id);
    const ours = Number(p?.our_price || 0);
    const best = bestCompetitorPrice(item.product_id);
    const diffLei = +(ours - best.price).toFixed(2);
    const diffPct = best.price > 0 ? +(((ours - best.price) / best.price) * 100).toFixed(2) : 0;
    const bad = diffLei > 0;

    totalOur += ours * item.qty;
    totalBestComp += best.price * item.qty;

    const tr = document.createElement('tr');
    tr.className = 'border-t border-white/5';
    tr.innerHTML = `
      <td class="px-3 py-2">${p?.name || '-'}</td>
      <td class="px-3 py-2">${ours.toFixed(2)}</td>
      <td class="px-3 py-2">${best.name}</td>
      <td class="px-3 py-2">${best.price.toFixed(2)}</td>
      <td class="px-3 py-2 ${bad ? 'text-rose-400' : 'text-emerald-400'}">${diffLei.toFixed(2)}</td>
      <td class="px-3 py-2 ${bad ? 'text-rose-400' : 'text-emerald-400'}">${diffPct.toFixed(2)}%</td>
      <td class="px-3 py-2">${item.qty}</td>
      <td class="px-3 py-2">
        <button class="btn ghost text-xs" data-rm="${idx}">Șterge</button>
      </td>
    `;
    tbody.appendChild(tr);
  });

  $('#sim-total').textContent = `${totalOur.toFixed(2)} lei`;

  // discount necesar ca totalul nostru să ajungă la total competitor
  let disc = 0;
  if (totalOur > 0 && totalBestComp > 0 && totalOur > totalBestComp) {
    disc = (1 - (totalBestComp / totalOur)) * 100;
  }
  $('#sim-discount').textContent = `${disc.toFixed(2)}%`;

  // butoane remove
  $$('#sim-tbody [data-rm]').forEach(btn => {
    btn.addEventListener('click', () => {
      const i = +btn.getAttribute('data-rm');
      CART.splice(i, 1);
      recalcCart();
    });
  });
}

$('#sim-add').addEventListener('click', () => {
  const product_id = $('#sim-product').value;
  const qty = Math.max(1, parseInt($('#sim-qty').value || '1', 10));
  CART.push({ product_id, qty });
  recalcCart();
});
